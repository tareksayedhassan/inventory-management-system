generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "mysql"
url      = env("DATABASE_URL")
}

enum Role {
USER
ADMIN
}

enum CompStatus {
ACTIVE
INACTIVE
PENDING
}

enum TransactionType {
DEPOSIT
WITHDRAWAL
RETURN
}

enum ReturnType {
PURCHASE_RETURN
SALE_RETURN
}

model User {
id               Int              @id @default(autoincrement())
name             String
email            String           @unique
password         String
role             Role             @default(USER)
avatar           String?
createdAt        DateTime         @default(now())
updatedAt        DateTime         @updatedAt
added_Supplier   Supplier[]       @relation("AddedBy")
updated_Supplier Supplier[]       @relation("UpdatedBy")
added_Client     Client[]         @relation("AddedBy")
updated_Client   Client[]         @relation("UpdatedBy")
added_Treasury   Treasury[]       @relation("AddedBy")
updated_Treasury Treasury[]       @relation("UpdatedBy")
added_Product    Product[]        @relation("AddedBy")
updated_Product  Product[]        @relation("UpdatedBy")
notifications    Notification[]   @relation("TriggeredBy")
productMovements ProductMovement[] @relation("TriggeredBy")
}

model Supplier {
id            Int           @id @default(autoincrement())
photo         String        @default("default.jpg")
status        CompStatus    @default(ACTIVE)
general_alert String
address       String
phone         String
creditBalance Float?        @default(0) // ليه فلوس (مدين للمورد)
debitBalance  Float?        @default(0) // عليه فلوس (المورد مدين لك)
netBalance    Float?        // الرصيد النهائي (creditBalance - debitBalance)
name          String?
createdAt     DateTime      @default(now())
updatedAt     DateTime      @updatedAt
added_by_id   Int?
updated_by_id Int?
added_by      User?         @relation("AddedBy", fields: [added_by_id], references: [id])
updated_by    User?         @relation("UpdatedBy", fields: [updated_by_id], references: [id])
transactions  Transaction[] @relation("SupplierTransactions")

@@index([added_by_id], map: "Supplier_added_by_id_fkey")
@@index([updated_by_id], map: "Supplier_updated_by_id_fkey")
}

model Client {
id            Int           @id @default(autoincrement())
photo         String        @default("default.jpg")
status        CompStatus    @default(ACTIVE)
general_alert String
address       String
phone         String
creditBalance Float?        @default(0) // ليه فلوس (مدين للعميل)
debitBalance  Float?        @default(0) // عليه فلوس (العميل مدين لك)
netBalance    Float?        // الرصيد النهائي (creditBalance - debitBalance)
name          String?
createdAt     DateTime      @default(now())
updatedAt     DateTime      @updatedAt
added_by_id   Int?
updated_by_id Int?
added_by      User?         @relation("AddedBy", fields: [added_by_id], references: [id])
updated_by    User?         @relation("UpdatedBy", fields: [updated_by_id], references: [id])
transactions  Transaction[] @relation("ClientTransactions")

@@index([added_by_id], map: "Client_added_by_id_fkey")
@@index([updated_by_id], map: "Client_updated_by_id_fkey")
}

model Transaction {
id          Int              @id @default(autoincrement())
type        TransactionType
returnType  ReturnType?      // نوع المرتجع (شراء أو بيع)
amount      Float
description String?
supplierId  Int?
clientId    Int?
treasuryId  Int
createdAt   DateTime         @default(now())
supplier    Supplier?        @relation("SupplierTransactions", fields: [supplierId], references: [id])
client      Client?          @relation("ClientTransactions", fields: [clientId], references: [id])
treasury    Treasury         @relation(fields: [treasuryId], references: [id])
notifications Notification[] @relation("TransactionNotifications")

@@index([supplierId])
@@index([clientId])
@@index([treasuryId])
}

model Treasury {
id                           Int               @id @default(autoincrement())
name                         String
is_master                    Boolean
last_exchange_receipt_number Int
last_collect_receipt_number  Int
balance                      Float             @default(0) // رصيد الخزينة
createdAt                    DateTime          @default(now())
updatedAt                    DateTime          @updatedAt
date                         DateTime          @default(now())
added_by_id                  Int?
updated_by_id                Int?
transactions                 Transaction[]
added_by                     User?             @relation("AddedBy", fields: [added_by_id], references: [id])
updated_by                   User?             @relation("UpdatedBy", fields: [updated_by_id], references: [id])
productStocks                ProductTreasury[]
treasuryTransactions         TreasuryTransaction[]
notifications                Notification[]    @relation("TreasuryNotifications")
productMovements             ProductMovement[] @relation("TreasuryProductMovements")

@@index([added_by_id], map: "Treasury_added_by_id_fkey")
@@index([updated_by_id], map: "Treasury_updated_by_id_fkey")
}

model TreasuryTransaction {
id          Int              @id @default(autoincrement())
type        TransactionType
amount      Float
description String?
treasuryId  Int
treasury    Treasury         @relation(fields: [treasuryId], references: [id])
createdAt   DateTime         @default(now())
notifications Notification[] @relation("TreasuryTransactionNotifications")

@@index([treasuryId])
}
model Notification {
  id                    Int              @id @default(autoincrement())
  message               String           // وصف الإشعار
  createdAt             DateTime         @default(now())
  userId                Int?             // المستخدم اللي قام بالعملية
  treasuryId            Int?             // الخزينة المتأثرة (بقت اختياري)
  transactionId         Int?             // المعاملة من جدول Transaction (لو موجودة)
  treasuryTransactionId Int?             // المعاملة من جدول TreasuryTransaction (لو موجودة)
  productMovementId     Int?             // حركة المنتج من جدول ProductMovement (لو موجودة)
   redirectUrl  String?
  user                  User?            @relation("TriggeredBy", fields: [userId], references: [id])
  treasury              Treasury?        @relation("TreasuryNotifications", fields: [treasuryId], references: [id])
  transaction           Transaction?     @relation("TransactionNotifications", fields: [transactionId], references: [id])
  treasuryTransaction   TreasuryTransaction? @relation("TreasuryTransactionNotifications", fields: [treasuryTransactionId], references: [id])
  productMovement       ProductMovement? @relation("ProductMovementNotifications", fields: [productMovementId], references: [id])

  @@index([userId])
  @@index([treasuryId])
  @@index([transactionId])
  @@index([treasuryTransactionId])
  @@index([productMovementId])
}
model Product {
id            Int              @id @default(autoincrement())
name          String
unit          String
buyPrice      Float
sellPrice     Float
stock         Int              @default(0)
minStock      Int              @default(0)
note          String?
createdAt     DateTime         @default(now())
updatedAt     DateTime         @updatedAt
added_by_id   Int?
updated_by_id Int?
categoryId    Int
category      Category         @relation(fields: [categoryId], references: [id])
productStocks ProductTreasury[]
added_by      User?            @relation("AddedBy", fields: [added_by_id], references: [id])
updated_by    User?            @relation("UpdatedBy", fields: [updated_by_id], references: [id])
productMovements ProductMovement[] @relation("ProductMovements")

@@index([added_by_id], map: "Product_added_by_id_fkey")
@@index([updated_by_id], map: "Product_updated_by_id_fkey")
}

model Category {
id        Int       @id @default(autoincrement())
name      String    @unique
products  Product[]
createdAt DateTime  @default(now())
updatedAt DateTime  @updatedAt
}

model ProductTreasury {
id         Int      @id @default(autoincrement())
product    Product  @relation(fields: [productId], references: [id])
productId  Int
treasury   Treasury @relation(fields: [treasuryId], references: [id])
treasuryId Int
stock      Int      @default(0)
updatedAt  DateTime @updatedAt

@@unique([productId, treasuryId])
}

model ProductMovement {
id          Int         @id @default(autoincrement())
type        String      // نوع الحركة (مثل ADD, PURCHASE_RETURN, SALE_RETURN)
quantity    Int         // الكمية
productId   Int
treasuryId  Int
userId      Int?        // المستخدم اللي قام بالحركة
description String?     // وصف الحركة
createdAt   DateTime    @default(now())
product     Product     @relation("ProductMovements", fields: [productId], references: [id])
treasury    Treasury    @relation("TreasuryProductMovements", fields: [treasuryId], references: [id])
user        User?       @relation("TriggeredBy", fields: [userId], references: [id])
notifications Notification[] @relation("ProductMovementNotifications")

@@index([productId])
@@index([treasuryId])
@@index([userId])
}