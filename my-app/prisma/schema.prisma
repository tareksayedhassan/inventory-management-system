generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum SupplierStatus {
  neutral       // لا ليه ولا عليه
  creditBalance // ليه فلوس (مدين للمورد)
  debitBalance  // عليه فلوس (المورد مدين لك)
}

enum TransactionType {
  Tahseel_mn_3ameel
  Sadad_le_moored
  Eda3_mobasher
  Sa7b_mobasher
}

enum ReturnType {
  PURCHASE_RETURN
  SALE_RETURN
}

enum Method {
  cash
  check
  transfer
}

model User {
  id                   Int                   @id @default(autoincrement())
  name                 String
  email                String                @unique
  password             String
  role                 Role                  @default(USER)
  avatar               String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  added_Supplier       Supplier[]            @relation("AddedBy")
  updated_Supplier     Supplier[]            @relation("UpdatedBy")
  added_Client         Client[]              @relation("AddedClientBy")
  updated_Client       Client[]              @relation("UpdatedClientBy")
  added_Treasury       Treasury[]            @relation("AddedTreasuryBy")
  added_Product        Product[]             @relation("AddedProductBy")
  updated_Product      Product[]             @relation("UpdatedProductBy")
  notifications        Notification[]        @relation("TriggeredBy")
  eznEdafat            EznEdafa[]            @relation("TriggeredBy")
  treasuryTransaction  TreasuryTransaction[]
  supplierTransactions SupplierTransaction[] @relation("TriggeredSupplierTransactions")
  clientTransactions   ClientTransaction[]   @relation("TriggeredClientTransactions")
}

model Supplier {
  id                   Int                   @id @default(autoincrement())
  status               SupplierStatus?
  phone                String
  tax_number           String
  address              String
  note                 String?
  name                 String
  Campname             String
  balance              Float                 @default(0)
  createdAt            DateTime              @default(now())
  added_by_id          Int?
  added_by             User?                 @relation("AddedBy", fields: [added_by_id], references: [id])
  eznEdafat            EznEdafa[]            @relation("SupplierEznEdafa")
  treasuryTransactions TreasuryTransaction[] @relation("TreasurySupplierTransactions")
  supplierTransactions SupplierTransaction[] @relation("SupplierTransactions")
  updated_by_id        Int?
  updated_by           User?                 @relation("UpdatedBy", fields: [updated_by_id], references: [id])

  @@index([added_by_id], map: "Supplier_added_by_id_fkey")
}

model SupplierTransaction {
  id            Int       @id @default(autoincrement())
  creditBalance Float?
  debitBalance  Float?
  treasuryId    Int?
  treasury      Treasury?    @relation("SupplierTreasuryTransactions", fields: [treasuryId], references: [id], onDelete: Cascade)
  description   String
  createdAt     DateTime?    @default(now())
  eznEdafaId    Int?
  eznEdafa      EznEdafa?    @relation("SupplierEznEdafaTransactions", fields: [eznEdafaId], references: [id])
  userId        Int?
  user          User?        @relation("TriggeredSupplierTransactions", fields: [userId], references: [id])
  supplierId    Int
  supplier      Supplier     @relation("SupplierTransactions", fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([treasuryId])
  @@index([eznEdafaId])
  @@index([userId])
  @@index([supplierId])
}

model Client {
  id                     Int                   @id @default(autoincrement())
  status                 SupplierStatus?
  phone                  String
  tax_number             String
  address                String
  note                   String?
  name                   String
  Campname               String
  balance                Float                 @default(0)
  createdAt              DateTime              @default(now())
  added_by_id            Int?
  added_by               User?                 @relation("AddedClientBy", fields: [added_by_id], references: [id])
  updated_by_id          Int?
  updated_by             User?                 @relation("UpdatedClientBy", fields: [updated_by_id], references: [id])
  clientTransactions     ClientTransaction[]   @relation("ClientTransactions")
  treasuryTransactions   TreasuryTransaction[] @relation("ClientTreasuryTransactions")

  @@index([added_by_id], map: "Client_added_by_id_fkey")
}

model ClientTransaction {
  id            Int        @id @default(autoincrement())
  creditBalance Float?
  debitBalance  Float?
  treasuryId    Int?
  treasury      Treasury?   @relation("ClientTreasuryTransactions", fields: [treasuryId], references: [id], onDelete: Cascade)
  description   String
  createdAt     DateTime?   @default(now())
  eznEdafaId    Int?
  eznEdafa      EznEdafa?   @relation("ClientEznEdafaTransactions", fields: [eznEdafaId], references: [id])
  userId        Int?
  user          User?       @relation("TriggeredClientTransactions", fields: [userId], references: [id])
  ClientId      Int
  Client        Client      @relation("ClientTransactions", fields: [ClientId], references: [id], onDelete: Cascade)

  @@index([treasuryId])
  @@index([eznEdafaId])
  @@index([userId])
  @@index([ClientId])
}

model Treasury {
  id                   Int                   @id @default(autoincrement())
  name                 String
  balance              Float                 @default(0)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  added_by_id          Int?
  added_by             User?                 @relation("AddedTreasuryBy", fields: [added_by_id], references: [id])
  treasuryTransactions TreasuryTransaction[]
  supplierTransactions SupplierTransaction[] @relation("SupplierTreasuryTransactions")
  clientTransactions   ClientTransaction[]   @relation("ClientTreasuryTransactions")
  notifications        Notification[]        @relation("TreasuryNotifications")

  @@index([added_by_id], map: "Treasury_added_by_id_fkey")
}

model TreasuryTransaction {
  id            Int             @id @default(autoincrement())
  type          TransactionType
  amount        Float
  method        Method
  description   String?
  note          String?
  reference     String?
  treasuryId    Int
  treasury      Treasury        @relation(fields: [treasuryId], references: [id], onDelete: Cascade)
  createdAt     DateTime?       @default(now())
  notifications Notification[]  @relation("TreasuryTransactionNotifications")
  userId        Int?
  user          User?           @relation(fields: [userId], references: [id])
  clientId      Int?
  client        Client?         @relation("ClientTreasuryTransactions", fields: [clientId], references: [id])
  supplierId    Int?
  supplier      Supplier?       @relation("TreasurySupplierTransactions", fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([treasuryId])
  @@index([userId])
  @@index([clientId])
  @@index([supplierId])
}

model Notification {
  id                    Int                  @id @default(autoincrement())
  message               String
  createdAt             DateTime             @default(now())
  userId                Int?
  treasuryId            Int?
  transactionId         Int?
  treasuryTransactionId Int?
  redirectUrl           String?
  user                  User?                @relation("TriggeredBy", fields: [userId], references: [id])
  treasury              Treasury?            @relation("TreasuryNotifications", fields: [treasuryId], references: [id])
  treasuryTransaction   TreasuryTransaction? @relation("TreasuryTransactionNotifications", fields: [treasuryTransactionId], references: [id])

  @@index([userId])
  @@index([treasuryId])
  @@index([transactionId])
  @@index([treasuryTransactionId])
}

model Product {
  id               Int                @id @default(autoincrement())
  productCode      String?
  name             String
  price            Float
  lastBuyPrice     Float?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  added_by_id      Int?
  updated_by_id    Int?
  added_by         User?              @relation("AddedProductBy", fields: [added_by_id], references: [id])
  updated_by       User?              @relation("UpdatedProductBy", fields: [updated_by_id], references: [id])
  eznEdafaEntries  EznEdafaProduct[]

  @@index([added_by_id], map: "Product_added_by_id_fkey")
  @@index([updated_by_id], map: "Product_updated_by_id_fkey")
}

model EznEdafaProduct {
  id          Int        @id @default(autoincrement())
  eznEdafa    EznEdafa   @relation(fields: [eznEdafaId], references: [id])
  eznEdafaId  Int
  product     Product    @relation(fields: [productId], references: [id])
  productId   Int
  amount      Int
  itemTotal   Float
  createdAt   DateTime   @default(now())

  @@unique([eznEdafaId, productId])
}

model EznEdafa {
  id                   Int                   @id @default(autoincrement())
  totalAmount          Float
  tax                  Float?                @default(0)
  supplierId           Int
  userId               Int?
  stockId              Int?
  StockWithoutTaxID    Int?
  createdAt            DateTime              @default(now())
  supplier             Supplier              @relation("SupplierEznEdafa", fields: [supplierId], references: [id], onDelete: Cascade)
  user                 User?                 @relation("TriggeredBy", fields: [userId], references: [id])
  stock                Stock?                @relation(fields: [stockId], references: [id])
  stockWithoutTax      StockWithoutTax?      @relation(fields: [StockWithoutTaxID], references: [id])
  productId            Int?
  products             EznEdafaProduct[]
  supplierTransactions SupplierTransaction[] @relation("SupplierEznEdafaTransactions")
  clientTransactions   ClientTransaction[]   @relation("ClientEznEdafaTransactions")

  @@index([supplierId])
  @@index([userId])
  @@index([stockId])
  @@index([StockWithoutTaxID])
  @@index([productId])
}

model Stock {
  id          Int        @id @default(autoincrement())
  name        String
  productCode String?
  stockTax    Int
  totalStock  Int
  totalValue  Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  eznEdafat   EznEdafa[]
}

model StockWithoutTax {
  id          Int        @id @default(autoincrement())
  name        String
  productCode String?
  totalStock  Int
  totalValue  Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  eznEdafat   EznEdafa[]
}
