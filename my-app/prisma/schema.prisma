generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum CompStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  RETURN
}

enum ReturnType {
  PURCHASE_RETURN
  SALE_RETURN
}

model User {
  id               Int            @id @default(autoincrement())
  name             String
  email            String         @unique
  password         String
  role             Role           @default(USER)
  avatar           String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  added_Supplier   Supplier[]     @relation("AddedBy")
  updated_Supplier Supplier[]     @relation("UpdatedBy")
  added_Client     Client[]       @relation("AddedBy")
  updated_Client   Client[]       @relation("UpdatedBy")
  added_Treasury   Treasury[]     @relation("AddedBy")
  updated_Treasury Treasury[]     @relation("UpdatedBy")
  added_Product    Product[]      @relation("AddedBy")
  updated_Product  Product[]      @relation("UpdatedBy")
  notifications    Notification[] @relation("TriggeredBy")
  eznEdafat        EznEdafa[]     @relation("TriggeredBy")

}

model Supplier {
  id            Int           @id @default(autoincrement())
  photo         String        @default("default.jpg")
  status        CompStatus    @default(ACTIVE)
  general_alert String
  address       String
  phone         String
  creditBalance Float?        @default(0) // ليه فلوس (مدين للمورد)
  debitBalance  Float?        @default(0) // عليه فلوس (المورد مدين لك)
  netBalance    Float? // الرصيد النهائي (creditBalance - debitBalance)
  name          String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  added_by_id   Int?
  updated_by_id Int?
  added_by      User?         @relation("AddedBy", fields: [added_by_id], references: [id])
  updated_by    User?         @relation("UpdatedBy", fields: [updated_by_id], references: [id])
  transactions  Transaction[] @relation("SupplierTransactions")
  eznEdafat     EznEdafa[]    @relation("SupplierEznEdafa")

  @@index([added_by_id], map: "Supplier_added_by_id_fkey")
  @@index([updated_by_id], map: "Supplier_updated_by_id_fkey")
}

model Client {
  id            Int           @id @default(autoincrement())
  photo         String        @default("default.jpg")
  status        CompStatus    @default(ACTIVE)
  general_alert String
  address       String
  phone         String
  creditBalance Float?        @default(0) // ليه فلوس (مدين للعميل)
  debitBalance  Float?        @default(0) // عليه فلوس (العميل مدين لك)
  netBalance    Float? // الرصيد النهائي (creditBalance - debitBalance)
  name          String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  added_by_id   Int?
  updated_by_id Int?
  added_by      User?         @relation("AddedBy", fields: [added_by_id], references: [id])
  updated_by    User?         @relation("UpdatedBy", fields: [updated_by_id], references: [id])
  transactions  Transaction[] @relation("ClientTransactions")

  @@index([added_by_id], map: "Client_added_by_id_fkey")
  @@index([updated_by_id], map: "Client_updated_by_id_fkey")
}

model Transaction {
  id            Int             @id @default(autoincrement())
  type          TransactionType
  returnType    ReturnType? // نوع المرتجع (شراء أو بيع)
  amount        Float
  description   String?
  supplierId    Int?
  clientId      Int?
  treasuryId    Int
  createdAt     DateTime        @default(now())
  supplier      Supplier?       @relation("SupplierTransactions", fields: [supplierId], references: [id])
  client        Client?         @relation("ClientTransactions", fields: [clientId], references: [id])
  treasury      Treasury        @relation(fields: [treasuryId], references: [id])
  notifications Notification[]  @relation("TransactionNotifications")

  @@index([supplierId])
  @@index([clientId])
  @@index([treasuryId])
}

model Treasury {
  id                           Int      @id @default(autoincrement())
  name                         String
  is_master                    Boolean
  last_exchange_receipt_number Int
  last_collect_receipt_number  Int
  balance                      Float    @default(0)
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
  date                         DateTime @default(now())
  added_by_id                  Int?
  updated_by_id                Int?

  transactions         Transaction[]
  added_by             User?                 @relation("AddedBy", fields: [added_by_id], references: [id])
  updated_by           User?                 @relation("UpdatedBy", fields: [updated_by_id], references: [id])
  treasuryTransactions TreasuryTransaction[]
  notifications        Notification[]        @relation("TreasuryNotifications")
  eznEdafat            EznEdafa[]            @relation("TreasuryEznEdafa")
}

model TreasuryTransaction {
  id            Int             @id @default(autoincrement())
  type          TransactionType
  amount        Float
  description   String?
  treasuryId    Int
  treasury      Treasury        @relation(fields: [treasuryId], references: [id])
  createdAt     DateTime        @default(now())
  notifications Notification[]  @relation("TreasuryTransactionNotifications")

  @@index([treasuryId])
}

model Notification {
  id                    Int                  @id @default(autoincrement())
  message               String // وصف الإشعار
  createdAt             DateTime             @default(now())
  userId                Int? // المستخدم اللي قام بالعملية
  treasuryId            Int? // الخزينة المتأثرة (بقت اختياري)
  transactionId         Int? // المعاملة من جدول Transaction (لو موجودة)
  treasuryTransactionId Int? // المعاملة من جدول TreasuryTransaction (لو موجودة)
  productMovementId     Int? // حركة المنتج من جدول ProductMovement (لو موجودة)
  redirectUrl           String?
  user                  User?                @relation("TriggeredBy", fields: [userId], references: [id])
  treasury              Treasury?            @relation("TreasuryNotifications", fields: [treasuryId], references: [id])
  transaction           Transaction?         @relation("TransactionNotifications", fields: [transactionId], references: [id])
  treasuryTransaction   TreasuryTransaction? @relation("TreasuryTransactionNotifications", fields: [treasuryTransactionId], references: [id])

  @@index([userId])
  @@index([treasuryId])
  @@index([transactionId])
  @@index([treasuryTransactionId])
  @@index([productMovementId])
}

model Product {
  id            Int        @id @default(autoincrement())
  productCode   String?
  name          String
  stock         Int        @default(0)
  note          String?
  price         Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  added_by_id   Int?
  updated_by_id Int?
  eznEdafat     EznEdafa[] @relation("ProductEznEdafa")

  added_by         User?             @relation("AddedBy", fields: [added_by_id], references: [id])
  updated_by       User?             @relation("UpdatedBy", fields: [updated_by_id], references: [id])

  @@index([added_by_id], map: "Product_added_by_id_fkey")
  @@index([updated_by_id], map: "Product_updated_by_id_fkey")
}

model EznEdafa {
  id     Int   @id @default(autoincrement())
  tax    Float @default(14)
  amount Float

  userId Int?
  user   User? @relation("TriggeredBy", fields: [userId], references: [id])

  supplierId Int
  supplier   Supplier @relation("SupplierEznEdafa", fields: [supplierId], references: [id])

  productId         Int
  product           Product          @relation("ProductEznEdafa", fields: [productId], references: [id], onDelete: Cascade)
  stockId           Int?
  stock             Stock?           @relation(fields: [stockId], references: [id])
  treasuryId        Int
  treasury          Treasury         @relation("TreasuryEznEdafa", fields: [treasuryId], references: [id])
  StockWithoutTaxID Int?
  StockWithoutTax   StockWithoutTax? @relation(fields: [StockWithoutTaxID], references: [id])
}

model Stock {
  id          Int        @id @default(autoincrement())
  name        String
  productCode String?
  stockTax    Int
  totalStock  Int
  totalValue  Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  eznEdafat   EznEdafa[]
}

model StockWithoutTax {
  id          Int        @id @default(autoincrement())
  name        String
  productCode String?
  totalStock  Int
  totalValue  Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  eznEdafat   EznEdafa[]
}
