generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum CompStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model User {
  id               Int        @id @default(autoincrement())
  name             String
  email            String     @unique
  password         String
  role             Role       @default(USER)
  avatar           String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  added_Company    Company[]  @relation("AddedBy")
  updated_Company  Company[]  @relation("UpdatedBy")
  added_Treasury   Treasury[] @relation("AddedBy")
  updated_Treasury Treasury[] @relation("UpdatedBy")
  added_Product    Product[]  @relation("AddedBy")
  updated_Product  Product[]  @relation("UpdatedBy")
}

model Company {
  id            Int        @id @default(autoincrement())
  photo         String     @default("default.jpg")
  status        CompStatus @default(ACTIVE)
  general_alert String
  address       String
  phone         String
  Name          String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  added_by_id   Int
  updated_by_id Int
  added_by      User       @relation("AddedBy", fields: [added_by_id], references: [id])
  updated_by    User       @relation("UpdatedBy", fields: [updated_by_id], references: [id])

  @@index([added_by_id], map: "Company_added_by_id_fkey")
  @@index([updated_by_id], map: "Company_updated_by_id_fkey")
}

model Treasury {
  id                           Int               @id @default(autoincrement())
  name                         String
  is_master                    Boolean
  last_exchange_receipt_number Int
  last_collect_receipt_number  Int
  createdAt                    DateTime          @default(now())
  updatedAt                    DateTime          @updatedAt
  added_by_id                  Int
  updated_by_id                Int
  date                         DateTime          @default(now())
  added_by                     User              @relation("AddedBy", fields: [added_by_id], references: [id])
  updated_by                   User              @relation("UpdatedBy", fields: [updated_by_id], references: [id])
  productStocks                ProductTreasury[]

  @@index([added_by_id], map: "Treasury_added_by_id_fkey")
  @@index([updated_by_id], map: "Treasury_updated_by_id_fkey")
}
model Product {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String
  unit      String
  buyPrice  Float
  sellPrice Float
  stock     Int      @default(0)
  minStock  Int      @default(0)
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  added_by_id   Int
  updated_by_id Int

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  productStocks ProductTreasury[]
  added_by   User @relation("AddedBy", fields: [added_by_id], references: [id])
  updated_by User @relation("UpdatedBy", fields: [updated_by_id], references: [id])

  @@index([added_by_id], map: "Product_added_by_id_fkey")
  @@index([updated_by_id], map: "Product_updated_by_id_fkey")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[] 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductTreasury {
  id Int @id @default(autoincrement())

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  treasury   Treasury @relation(fields: [treasuryId], references: [id])
  treasuryId Int

  stock     Int      @default(0)
  updatedAt DateTime @updatedAt

  @@unique([productId, treasuryId])
}
